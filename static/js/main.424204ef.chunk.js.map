{"version":3,"sources":["Constants.js","utils.js","Components/Numbers.js","Components/Controls.js","Components/MainTask.js","Components/TimerContainer.js","App.js","index.js"],"names":["backgroundUrls","LOCAL_STORAGE_KEYS","MAIN_TASK","ORIGINAL_TIME","setLocalStorage","key","value","localStorage","setItem","Numbers","props","time","isRunning","enterTime","minutes","Math","floor","seconds","className","readOnly","type","autoComplete","onChange","event","newMinutes","target","style","cursor","String","padStart","Controls","onResetClick","setIsRunning","onClick","disabled","backgroundColor","MainTask","mainTask","enterMainTask","newMainTask","TimerContainer","updateBackground","useState","setMainTask","originalTime","setOriginalTime","setTime","intervalId","setIntervalId","useEffect","localStorageStore","Object","values","reduce","acc","getItem","localTime","localTask","newIntervalId","setInterval","oldTime","clearInterval","newTask","newTime","chooseRandomBackgroundUrl","random","length","App","backgroundUrl","setBackgroundUrl","backgroundImage","newBackground","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.424204ef.chunk.js","sourcesContent":["export const backgroundUrls = [\n  \"https://www.nasa.gov/sites/default/files/thumbnails/image/potw2039a.jpg\",\n  \"https://www.nasa.gov/sites/default/files/thumbnails/image/hubble_snowman_wfc3_display.jpg\",\n  \"https://www.nasa.gov/sites/default/files/thumbnails/image/hubble_deml249_large_3mb.jpg\",\n  \"https://www.nasa.gov/sites/default/files/thumbnails/image/hubble_ngc2903_potw2143a.jpg.jpg\",\n  \"https://www.nasa.gov/sites/default/files/thumbnails/image/potw2138a.jpg\",\n  \"https://www.nasa.gov/sites/default/files/thumbnails/image/arp299.jpg\",\n  \"https://www.nasa.gov/sites/default/files/thumbnails/image/potw2103a.jpg\",\n];\n\nexport const LOCAL_STORAGE_KEYS = {\n  MAIN_TASK: \"MAIN_TASK\",\n  ORIGINAL_TIME: \"ORIGINAL_TIME\",\n};\n\nexport const defaultTask = \"Main Task\";\nexport const defaultTime = 1200;\n","export const getLocalStorage = (keys) =>\n  keys.reduce((acc, key) => {\n    const value = localStorage.getItem(key);\n    return { ...acc, [key]: value };\n  }, {});\n\nexport const setLocalStorage = (key, value) => {\n  localStorage.setItem(key, value);\n};\n","function Numbers(props) {\n  const { time, isRunning, enterTime } = props;\n\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n\n  const updateMinutes = (event) => {\n    const newMinutes = event.target.value;\n    const newTime = newMinutes * 60;\n    enterTime(newTime);\n  };\n\n  return (\n    <div className=\"numbersContainer\">\n      <input\n        className=\"minutesInput\"\n        readOnly={isRunning}\n        type=\"text\"\n        value={minutes}\n        autoComplete=\"false\"\n        onChange={updateMinutes}\n        style={isRunning ? { cursor: \"not-allowed\" } : {}}\n      />\n      :{String(seconds).padStart(2, \"0\")}\n    </div>\n  );\n}\n\nexport default Numbers;\n","function Controls(props) {\n  const { onResetClick, isRunning, setIsRunning } = props;\n\n  const updateIsRunning = () => {\n    const newIsRunning = !isRunning;\n    setIsRunning(newIsRunning);\n  };\n\n  return (\n    <div className=\"controls\">\n      <button\n        className=\"controls-button\"\n        onClick={onResetClick}\n        disabled={isRunning}\n        style={{\n          backgroundColor: isRunning ? \"#aaaaaa\" : \"#f0ad4e\",\n          cursor: isRunning ? \"not-allowed\" : \"pointer\",\n        }}\n      >\n        Reset\n      </button>\n      <button\n        className=\"controls-button\"\n        onClick={updateIsRunning}\n        style={{\n          backgroundColor: isRunning ? \"#bb2124\" : \"#22bb33\",\n        }}\n      >\n        {isRunning ? \"Stop\" : \"Start\"}\n      </button>\n    </div>\n  );\n}\n\nexport default Controls;\n","function MainTask(props) {\n  const { mainTask, enterMainTask } = props;\n\n  const updateMainTask = (event) => {\n    const newMainTask = event.target.value;\n    enterMainTask(newMainTask);\n  };\n\n  return (\n    <div>\n      <textarea\n        className=\"mainTaskInput\"\n        type=\"text\"\n        value={mainTask}\n        autoComplete=\"false\"\n        onChange={updateMainTask}\n      />\n    </div>\n  );\n}\n\nexport default MainTask;\n","import { useState, useEffect } from \"react\";\n\nimport { getLocalStorage, setLocalStorage } from \"../utils\";\nimport { LOCAL_STORAGE_KEYS, defaultTask, defaultTime } from \"../Constants\";\nimport Numbers from \"./Numbers\";\nimport Controls from \"./Controls\";\nimport MainTask from \"./MainTask\";\n\nfunction TimerContainer(props) {\n  const { updateBackground } = props;\n\n  const [mainTask, setMainTask] = useState(defaultTask);\n  const [originalTime, setOriginalTime] = useState(defaultTime);\n  const [time, setTime] = useState(originalTime);\n  const [isRunning, setIsRunning] = useState(false);\n  const [intervalId, setIntervalId] = useState();\n\n  const onResetClick = () => {\n    setTime(originalTime);\n  };\n\n  const enterTime = (newTime) => {\n    setTime(newTime);\n    setOriginalTime(newTime);\n    setLocalStorage(LOCAL_STORAGE_KEYS.ORIGINAL_TIME, newTime);\n  };\n\n  const enterMainTask = (newTask) => {\n    setMainTask(newTask);\n    setLocalStorage(LOCAL_STORAGE_KEYS.MAIN_TASK, newTask);\n  };\n\n  useEffect(() => {\n    const localStorageStore = getLocalStorage(\n      Object.values(LOCAL_STORAGE_KEYS)\n    );\n\n    const localTime = localStorageStore[LOCAL_STORAGE_KEYS.ORIGINAL_TIME];\n    if (localTime) {\n      setTime(localTime);\n      setOriginalTime(localTime);\n    }\n\n    const localTask = localStorageStore[LOCAL_STORAGE_KEYS.MAIN_TASK];\n    if (localTask) {\n      setMainTask(localTask);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (isRunning) {\n      const newIntervalId = setInterval(() => {\n        setTime((oldTime) => oldTime - 1);\n      }, 1000);\n      setIntervalId(newIntervalId);\n    } else if (intervalId) {\n      clearInterval(intervalId);\n    }\n  }, [isRunning]);\n\n  useEffect(() => {\n    if (time <= 0) {\n      setIsRunning(false);\n      onResetClick();\n    }\n  }, [time]);\n\n  return (\n    <div className=\"timer-container\">\n      <MainTask mainTask={mainTask} enterMainTask={enterMainTask} />\n      <Numbers time={time} enterTime={enterTime} isRunning={isRunning} />\n      <Controls\n        onResetClick={onResetClick}\n        isRunning={isRunning}\n        setIsRunning={setIsRunning}\n      />\n      <button className=\"new-background-button\" onClick={updateBackground}>\n        New background\n      </button>\n    </div>\n  );\n}\n\nexport default TimerContainer;\n","import { useState, useEffect } from \"react\";\n\nimport { backgroundUrls } from \"./Constants\";\nimport TimerContainer from \"./Components/TimerContainer\";\n\nconst chooseRandomBackgroundUrl = () =>\n  backgroundUrls[Math.floor(Math.random() * backgroundUrls.length)];\n\nfunction App() {\n  const [backgroundUrl, setBackgroundUrl] = useState();\n\n  useEffect(() => {\n    setBackgroundUrl(chooseRandomBackgroundUrl());\n  }, []);\n\n  return (\n    <div\n      className=\"app\"\n      style={{\n        backgroundImage: `url(${backgroundUrl})`,\n      }}\n    >\n      <TimerContainer\n        updateBackground={() => {\n          let newBackground = backgroundUrl;\n          while (newBackground == backgroundUrl) {\n            newBackground = chooseRandomBackgroundUrl();\n          }\n          setBackgroundUrl(newBackground);\n        }}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}