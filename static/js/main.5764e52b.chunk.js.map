{"version":3,"sources":["Constants.js","utils.js","Components/Numbers.js","Components/Controls.js","Components/MainTask.js","Components/TimerContainer.js","App.js","index.js"],"names":["backgroundUrls","LOCAL_STORAGE_KEYS","MAIN_TASK","ORIGINAL_TIME","setLocalStorage","key","value","localStorage","setItem","Numbers","props","time","isRunning","enterTime","minutes","Math","floor","seconds","_jsxs","className","children","_jsx","readOnly","type","autoComplete","onChange","event","newMinutes","target","style","cursor","String","padStart","Controls","onResetClick","setIsRunning","onClick","disabled","backgroundColor","updateIsRunning","MainTask","mainTask","enterMainTask","newMainTask","TimerContainer","updateBackground","isTestingBackground","setMainTask","useState","originalTime","setOriginalTime","setTime","intervalId","setIntervalId","intervalIdRef","useRef","useEffect","current","useCallback","localStorageStore","Object","values","reduce","acc","getItem","localTime","localTask","newIntervalId","setInterval","oldTime","clearInterval","newTask","newTime","chooseRandomBackgroundUrl","random","length","App","backgroundUrl","setBackgroundUrl","console","log","backgroundImage","concat","newBackground","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5764e52b.chunk.js","sourcesContent":["export const backgroundUrls = [\n  \"https://chandra.harvard.edu/photo/2022/ngc4424/ngc4424_lg.jpg\",\n  \"https://chandra.harvard.edu/photo/2022/snr0519/snr0519_lg.jpg\",\n  \"https://chandra.harvard.edu/photo/2022/zetaoph/zetaoph_lg.jpg\",\n  \"https://chandra.harvard.edu/photo/2021/uranus/uranus_lg.jpg\",\n  \"https://chandra.harvard.edu/photo/2021/nclump/nclump_lg.jpg\",\n  \"https://chandra.harvard.edu/photo/2022/imbhs/imbhs_lg.jpg\",\n  \"https://chandra.harvard.edu/photo/2017/dark/dark_lg.jpg\",\n  \"https://chandra.harvard.edu/photo/2009/gridge/gridge_lg.jpg\",\n  \"https://chandra.harvard.edu/photo/2011/cdfs/cdfs_lg.jpg\",\n];\n\nexport const testBackgroundUrl = null;\n\nexport const LOCAL_STORAGE_KEYS = {\n  MAIN_TASK: \"MAIN_TASK\",\n  ORIGINAL_TIME: \"ORIGINAL_TIME\",\n};\n\nexport const defaultTask = \"Main Task\";\nexport const defaultTime = 1200;\n","export const getLocalStorage = (keys) =>\n  keys.reduce((acc, key) => {\n    const value = localStorage.getItem(key);\n    return { ...acc, [key]: value };\n  }, {});\n\nexport const setLocalStorage = (key, value) => {\n  localStorage.setItem(key, value);\n};\n","function Numbers(props) {\n  const { time, isRunning, enterTime } = props;\n\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n\n  const updateMinutes = (event) => {\n    const newMinutes = event.target.value;\n    const newTime = newMinutes * 60;\n    enterTime(newTime);\n  };\n\n  return (\n    <div className=\"numbersContainer\">\n      <input\n        className=\"minutesInput\"\n        readOnly={isRunning}\n        type=\"text\"\n        value={minutes}\n        autoComplete=\"false\"\n        onChange={updateMinutes}\n        style={isRunning ? { cursor: \"not-allowed\" } : {}}\n      />\n      :{String(seconds).padStart(2, \"0\")}\n    </div>\n  );\n}\n\nexport default Numbers;\n","function Controls(props) {\n  const { onResetClick, isRunning, setIsRunning } = props;\n\n  const updateIsRunning = () => {\n    const newIsRunning = !isRunning;\n    setIsRunning(newIsRunning);\n  };\n\n  return (\n    <div className=\"controls\">\n      <button\n        className=\"controls-button\"\n        onClick={onResetClick}\n        disabled={isRunning}\n        style={{\n          backgroundColor: isRunning ? \"#aaaaaa\" : \"#f0ad4e\",\n          cursor: isRunning ? \"not-allowed\" : \"pointer\",\n        }}\n      >\n        Reset\n      </button>\n      <button\n        className=\"controls-button\"\n        onClick={updateIsRunning}\n        style={{\n          backgroundColor: isRunning ? \"#bb2124\" : \"#22bb33\",\n        }}\n      >\n        {isRunning ? \"Stop\" : \"Start\"}\n      </button>\n    </div>\n  );\n}\n\nexport default Controls;\n","function MainTask(props) {\n  const { mainTask, enterMainTask } = props;\n\n  const updateMainTask = (event) => {\n    const newMainTask = event.target.value;\n    enterMainTask(newMainTask);\n  };\n\n  return (\n    <div>\n      <textarea\n        className=\"mainTaskInput\"\n        type=\"text\"\n        value={mainTask}\n        autoComplete=\"false\"\n        onChange={updateMainTask}\n      />\n    </div>\n  );\n}\n\nexport default MainTask;\n","import { useState, useEffect, useCallback, useRef } from \"react\";\n\nimport { getLocalStorage, setLocalStorage } from \"../utils\";\nimport { LOCAL_STORAGE_KEYS, defaultTask, defaultTime } from \"../Constants\";\nimport Numbers from \"./Numbers\";\nimport Controls from \"./Controls\";\nimport MainTask from \"./MainTask\";\n\nfunction TimerContainer(props) {\n  const { updateBackground, isTestingBackground } = props;\n\n  const [mainTask, setMainTask] = useState(defaultTask);\n  const [originalTime, setOriginalTime] = useState(defaultTime);\n  const [time, setTime] = useState(originalTime);\n  const [isRunning, setIsRunning] = useState(false);\n  const [intervalId, setIntervalId] = useState();\n  const intervalIdRef = useRef();\n\n  useEffect(() => {\n    intervalIdRef.current = intervalId;\n  }, [intervalId]);\n\n  const onResetClick = useCallback(() => {\n    setTime(originalTime);\n  }, [originalTime]);\n\n  const enterTime = (newTime) => {\n    setTime(newTime);\n    setOriginalTime(newTime);\n    setLocalStorage(LOCAL_STORAGE_KEYS.ORIGINAL_TIME, newTime);\n  };\n\n  const enterMainTask = (newTask) => {\n    setMainTask(newTask);\n    setLocalStorage(LOCAL_STORAGE_KEYS.MAIN_TASK, newTask);\n  };\n\n  useEffect(() => {\n    const localStorageStore = getLocalStorage(\n      Object.values(LOCAL_STORAGE_KEYS)\n    );\n\n    const localTime = localStorageStore[LOCAL_STORAGE_KEYS.ORIGINAL_TIME];\n    if (localTime) {\n      setTime(localTime);\n      setOriginalTime(localTime);\n    }\n\n    const localTask = localStorageStore[LOCAL_STORAGE_KEYS.MAIN_TASK];\n    if (localTask) {\n      setMainTask(localTask);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (isRunning) {\n      const newIntervalId = setInterval(() => {\n        setTime((oldTime) => oldTime - 1);\n      }, 1000);\n      setIntervalId(newIntervalId);\n    } else if (intervalIdRef.current) {\n      clearInterval(intervalIdRef.current);\n    }\n  }, [isRunning]);\n\n  useEffect(() => {\n    if (time <= 0) {\n      setIsRunning(false);\n      onResetClick();\n    }\n  }, [onResetClick, time]);\n\n  return (\n    <div className=\"timer-container\">\n      <MainTask mainTask={mainTask} enterMainTask={enterMainTask} />\n      <Numbers time={time} enterTime={enterTime} isRunning={isRunning} />\n      <Controls\n        onResetClick={onResetClick}\n        isRunning={isRunning}\n        setIsRunning={setIsRunning}\n      />\n      <button\n        className=\"new-background-button\"\n        onClick={updateBackground}\n        disabled={isTestingBackground}\n      >\n        New background\n      </button>\n    </div>\n  );\n}\n\nexport default TimerContainer;\n","import { useState, useEffect } from \"react\";\n\nimport { backgroundUrls, testBackgroundUrl } from \"./Constants\";\nimport TimerContainer from \"./Components/TimerContainer\";\n\nconst chooseRandomBackgroundUrl = () =>\n  backgroundUrls[Math.floor(Math.random() * backgroundUrls.length)];\n\nfunction App() {\n  const [backgroundUrl, setBackgroundUrl] = useState();\n  const isTestingBackground = !!testBackgroundUrl;\n\n  useEffect(() => {\n    setBackgroundUrl(\n      isTestingBackground ? testBackgroundUrl : chooseRandomBackgroundUrl()\n    );\n  }, [isTestingBackground]);\n\n  useEffect(() => {\n    console.log(backgroundUrl);\n  }, [backgroundUrl]);\n\n  return (\n    <div\n      className=\"app\"\n      style={{\n        backgroundImage: `url(${backgroundUrl})`,\n      }}\n    >\n      <TimerContainer\n        updateBackground={() => {\n          if (isTestingBackground) {\n            return;\n          }\n          let newBackground = backgroundUrl;\n          while (newBackground === backgroundUrl) {\n            newBackground = chooseRandomBackgroundUrl();\n          }\n          setBackgroundUrl(newBackground);\n        }}\n        isTestingBackground={isTestingBackground}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}